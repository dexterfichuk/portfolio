{"version":3,"sources":["logo.svg","components/cards/CardBox.jsx","components/headings/Heading.jsx","data/events.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CardBox","className","this","props","events","map","event","i","imageUrl","description","title","date","mainColor","backgroundColor","Card","style","color","Img","variant","src","top","Body","Text","toUpperCase","Title","React","Component","Heading","text","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mNAAAA,EAAOC,QAAU,IAA0B,kC,kJCKtBC,G,uLAEb,OACI,yBAAKC,UAAU,qBAAf,IACIC,KAAKC,MAAMC,OAAOC,KAAI,SAACC,EAAOC,GAAO,IACzBC,EAAmEF,EAAnEE,SAAUC,EAAyDH,EAAzDG,YAAaC,EAA4CJ,EAA5CI,MAAOC,EAAqCL,EAArCK,KAAMC,EAA+BN,EAA/BM,UAAWC,EAAoBP,EAApBO,gBAEvD,OACI,kBAACC,EAAA,EAAD,CAAMb,UAAU,eAAec,MAAOH,GAAa,CAACI,MAAOJ,IACtDL,EAAI,IAAM,GACP,yBAAKN,UAAU,iBACX,kBAACa,EAAA,EAAKG,IAAN,CAAUC,QAAQ,MAAMC,IAAKX,IAC7B,yBAAKP,UAAU,YAAYc,MAAOH,GAAa,CAACC,gBAAiBD,EAAWQ,IAAK,MAGzF,kBAACN,EAAA,EAAKO,KAAN,CAAWN,MAAOF,GAAmB,CAACA,gBAAiBA,IACnD,kBAACC,EAAA,EAAKQ,KAAN,CAAWrB,UAAU,gBAAgBU,EAAKY,eAC1C,kBAACT,EAAA,EAAKU,MAAN,KAAad,GACb,kBAACI,EAAA,EAAKQ,KAAN,CAAWrB,UAAU,gBAChBQ,IAGRF,EAAI,IAAM,GACP,yBAAKN,UAAU,iBACX,kBAACa,EAAA,EAAKG,IAAN,CAAUC,QAAQ,MAAMC,IAAKX,IAC7B,yBAAKP,UAAU,YAAYc,MAAOH,GAAa,CAACC,gBAAiBD,e,GAzBhEa,IAAMC,YCDtBC,G,uLAEb,OACI,yBAAK1B,UAAU,aACX,4BAAKC,KAAKC,MAAMyB,W,GAJKH,IAAMC,YCJ9BtB,EAAS,CAClB,CACIM,MAAO,yBACPF,SAAU,+EACVG,KAAM,mBACNF,YAAa,yHACbG,UAAW,UACXC,gBAAiB,WAErB,CACIH,MAAO,qCACPF,SAAU,wEACVG,KAAM,qBACNF,YAAa,4EACbG,UAAW,UACXC,gBAAiB,WAErB,CACIH,MAAO,uDACPF,SAAU,4EACVG,KAAM,kBACNF,YAAa,yHACbG,UAAW,UACXC,gBAAiB,WAErB,CACIH,MAAO,6CACPF,SAAU,0HACVG,KAAM,qBACNF,YAAa,yHACbG,UAAW,QACXC,gBAAiB,WAErB,CACIH,MAAO,6CACPF,SAAU,iDACVG,KAAM,qBACNF,YAAa,yHACbG,UAAW,UACXC,gBAAiB,WAErB,CACIH,MAAO,6CACPF,SAAU,iDACVG,KAAM,qBACNF,YAAa,2H,YCzBNoB,MAbf,WACE,OAEE,yBAAK5B,UAAU,OACb,6BACA,kBAAC,EAAD,CAAS2B,KAAM,kBAEf,kBAAC,EAAD,CAASA,KAAM,aACf,kBAAC,EAAD,CAASxB,OAAQA,MCHH0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7eeddec8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport './CardBox.css';\n\n// https://www.sidewalklabs.com/blog/announcing-replicas-spin-out-and-series-a/\nexport default class CardBox extends React.Component {\n    render() {\n        return (\n            <div className=\"horizontal-slider\"> {\n                this.props.events.map((event, i) => {\n                    const { imageUrl, description, title, date, mainColor, backgroundColor } = event\n\n                    return (\n                        <Card className=\"cardbox-card\" style={mainColor && {color: mainColor}}>\n                            {i % 2 === 0 && \n                                <div className='img-container'>\n                                    <Card.Img variant=\"top\" src={imageUrl}/>\n                                    <div className='color-box' style={mainColor && {backgroundColor: mainColor, top: 0}}></div>\n                                </div>\n                            }\n                            <Card.Body style={backgroundColor && {backgroundColor: backgroundColor}}>\n                                <Card.Text className=\"cardbox-date\">{date.toUpperCase()}</Card.Text>\n                                <Card.Title>{title}</Card.Title>\n                                <Card.Text className=\"card-excerpt\">\n                                    {description}\n                                </Card.Text>\n                            </Card.Body>\n                            {i % 2 === 1 && \n                                <div className='img-container'>\n                                    <Card.Img variant=\"top\" src={imageUrl}/>\n                                    <div className='color-box' style={mainColor && {backgroundColor: mainColor}}></div>\n                                </div>\n                            }\n                        </Card>\n                    )\n                })\n            }\n            </div>\n        )\n\n    }\n}","import React from 'react';\n\nimport './Heading.css';\n\nexport default class Heading extends React.Component {\n    render() {\n        return (\n            <div className=\"title-box\">\n                <h4>{this.props.text}</h4>\n            </div>\n        )\n    }\n};","export const events = [\n    {\n        title: 'Data Innovation Summit',\n        imageUrl: 'https://datainnovationsummit.com/wp-content/uploads/2019/09/Timo-DIS2018.jpg',\n        date: 'March 19th, 2020',\n        description: 'The best way to consume React-Bootstrap is via the npm package which you can install with npm (or yarn if you prefer).',\n        mainColor: '#caf5fc',\n        backgroundColor: '#0f1d4d'\n    },\n    {\n        title: 'REâ€¢WORK Responsible AI Summit',\n        imageUrl: 'https://pbs.twimg.com/media/EHp7Y6lX4AIDomL?format=jpg&name=4096x4096',\n        date: 'October 24th, 2019',\n        description: 'Talk on how bias can work its way into production models going unnoticed.',\n        mainColor: '#ba3535',\n        backgroundColor: '#fee4e0'\n    },\n    {\n        title: 'GDG Waterloo: Unique Applications of Computer Vision',\n        imageUrl: 'https://secure.meetupstatic.com/photos/event/a/8/6/highres_480122694.jpeg',\n        date: 'April 4th, 2019',\n        description: 'The best way to consume React-Bootstrap is via the npm package which you can install with npm (or yarn if you prefer).',\n        mainColor: '#6a2db3',\n        backgroundColor: '#e9e0f1'\n    },\n    {\n        title: 'The retail crisis is now a landlord crisis',\n        imageUrl: 'https://cdn.zuerich.com/sites/default/files/styles/sharing/public/web_zuerich_home_topevents_1600x900.jpg?itok=NI4hhrwV',\n        date: 'October 24th, 2019',\n        description: 'The best way to consume React-Bootstrap is via the npm package which you can install with npm (or yarn if you prefer).',\n        mainColor: 'black',\n        backgroundColor: '#ffcf2b'\n    },\n    {\n        title: 'The retail crisis is now a landlord crisis',\n        imageUrl: 'https://www.re-work.co/assets/about_rework.jpg',\n        date: 'October 24th, 2019',\n        description: 'The best way to consume React-Bootstrap is via the npm package which you can install with npm (or yarn if you prefer).',\n        mainColor: '#122e94',\n        backgroundColor: '#caf5fc'\n    },\n    {\n        title: 'The retail crisis is now a landlord crisis',\n        imageUrl: 'https://www.re-work.co/assets/about_rework.jpg',\n        date: 'October 24th, 2019',\n        description: 'The best way to consume React-Bootstrap is via the npm package which you can install with npm (or yarn if you prefer).'\n    }\n]","import React from 'react';\nimport CardBox from './components/cards/CardBox';\nimport Heading from './components/headings/Heading';\nimport {events} from './data/events';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    \n    <div className=\"App\">\n      <br/>\n      <Heading text={'Dexter Fichuk'}></Heading>\n\n      <Heading text={'Speaking'}></Heading>\n      <CardBox events={events}></CardBox>\n          </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}